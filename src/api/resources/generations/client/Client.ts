/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Sync from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as fs from "fs";
import { Blob } from "buffer";
import { toJson } from "../../../../core/json";

export declare namespace Generations {
    export interface Options {
        environment?: core.Supplier<environments.SyncEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Generations {
    constructor(protected readonly _options: Generations.Options = {}) {}

    /**
     * @param {Sync.CreateGenerationDto} request
     * @param {Generations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.BadRequestError}
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generations.create({
     *         input: [{
     *                 type: "video",
     *                 url: "https://assets.sync.so/docs/example-video.mp4"
     *             }, {
     *                 type: "audio",
     *                 url: "https://assets.sync.so/docs/example-audio.wav"
     *             }],
     *         model: "lipsync-2",
     *         options: {
     *             sync_mode: "loop"
     *         }
     *     })
     */
    public create(
        request: Sync.CreateGenerationDto,
        requestOptions?: Generations.RequestOptions,
    ): core.HttpResponsePromise<Sync.Generation> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Sync.CreateGenerationDto,
        requestOptions?: Generations.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.Generation>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "/v2/generate",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.3",
                "User-Agent": "@sync.so/sdk/0.2.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.Generation, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sync.BadRequestError(_response.error.body as Sync.GenerationError, _response.rawResponse);
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling POST /v2/generate.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob | undefined} video
     * @param {File | fs.ReadStream | Blob | undefined} audio
     * @param {Sync.CreateGenerationRequest} request
     * @param {Generations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.BadRequestError}
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generations.createWithFiles(fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), {
     *         model: "lipsync-2"
     *     })
     */
    public createWithFiles(
        video: File | fs.ReadStream | Blob | undefined,
        audio: File | fs.ReadStream | Blob | undefined,
        request: Sync.CreateGenerationRequest,
        requestOptions?: Generations.RequestOptions,
    ): core.HttpResponsePromise<Sync.Generation> {
        return core.HttpResponsePromise.fromPromise(this.__createWithFiles(video, audio, request, requestOptions));
    }

    private async __createWithFiles(
        video: File | fs.ReadStream | Blob | undefined,
        audio: File | fs.ReadStream | Blob | undefined,
        request: Sync.CreateGenerationRequest,
        requestOptions?: Generations.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.Generation>> {
        const _request = await core.newFormData();
        if (video != null) {
            await _request.appendFile("video", video);
        }

        if (audio != null) {
            await _request.appendFile("audio", audio);
        }

        _request.append("model", request.model);
        if (request.input != null) {
            for (const _item of request.input) {
                _request.append("input", typeof _item === "string" ? _item : toJson(_item));
            }
        }

        if (request.options != null) {
            _request.append("options", toJson(request.options));
        }

        if (request.webhookUrl != null) {
            _request.append("webhookUrl", request.webhookUrl);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "/v2/generate",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.3",
                "User-Agent": "@sync.so/sdk/0.2.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.Generation, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sync.BadRequestError(_response.error.body as Sync.GenerationError, _response.rawResponse);
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling POST /v2/generate.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Sync.GenerationId} id
     * @param {Generations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.NotFoundError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generations.get("6533643b-aceb-4c40-967e-d9ba9baac39e")
     */
    public get(
        id: Sync.GenerationId,
        requestOptions?: Generations.RequestOptions,
    ): core.HttpResponsePromise<Sync.Generation> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: Sync.GenerationId,
        requestOptions?: Generations.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.Generation>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                `/v2/generate/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.3",
                "User-Agent": "@sync.so/sdk/0.2.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.Generation, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Sync.NotFoundError(_response.error.body as Sync.GenerationError, _response.rawResponse);
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling GET /v2/generate/{id}.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Sync.ListGenerationsRequest} request
     * @param {Generations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generations.list()
     */
    public list(
        request: Sync.ListGenerationsRequest = {},
        requestOptions?: Generations.RequestOptions,
    ): core.HttpResponsePromise<Sync.Generation[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Sync.ListGenerationsRequest = {},
        requestOptions?: Generations.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.Generation[]>> {
        const { status } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (status != null) {
            _queryParams["status"] = status;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "/v2/generations",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.3",
                "User-Agent": "@sync.so/sdk/0.2.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.Generation[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling GET /v2/generations.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Sync.CreateGenerationDto} request
     * @param {Generations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generations.estimateCost({
     *         input: [{
     *                 type: "video",
     *                 url: "https://assets.sync.so/docs/example-video.mp4"
     *             }, {
     *                 type: "audio",
     *                 url: "https://assets.sync.so/docs/example-audio.wav"
     *             }],
     *         model: "lipsync-2",
     *         options: {
     *             sync_mode: "loop"
     *         }
     *     })
     */
    public estimateCost(
        request: Sync.CreateGenerationDto,
        requestOptions?: Generations.RequestOptions,
    ): core.HttpResponsePromise<Sync.EstimatedGenerationCost[]> {
        return core.HttpResponsePromise.fromPromise(this.__estimateCost(request, requestOptions));
    }

    private async __estimateCost(
        request: Sync.CreateGenerationDto,
        requestOptions?: Generations.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.EstimatedGenerationCost[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "/v2/analyze/cost",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.3",
                "User-Agent": "@sync.so/sdk/0.2.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.EstimatedGenerationCost[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling POST /v2/analyze/cost.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SYNC_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
