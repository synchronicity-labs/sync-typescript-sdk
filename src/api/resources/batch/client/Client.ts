/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Sync from "../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Batch {
    export interface Options {
        environment?: core.Supplier<environments.SyncEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Batch {
    constructor(protected readonly _options: Batch.Options = {}) {}

    /**
     * API for [Batch Processing](/api-reference/guides/batch-processing). Available only for `Scale` and `Enterprise` plans.
     *
     * @param {File | fs.ReadStream | Blob} input
     * @param {Sync.CreateBatchRequest} request
     * @param {Batch.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.BadRequestError}
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.PaymentRequiredError}
     * @throws {@link Sync.TooManyRequestsError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.batch.create(fs.createReadStream("/path/to/your/file"), {
     *         webhook_url: "https://your-webhook-url.com/batch-webhook",
     *         dry_run: false
     *     })
     *
     * @example
     *     await client.batch.create(fs.createReadStream("/path/to/your/file"), {
     *         dry_run: true
     *     })
     */
    public create(
        input: File | fs.ReadStream | Blob,
        request: Sync.CreateBatchRequest,
        requestOptions?: Batch.RequestOptions,
    ): core.HttpResponsePromise<Sync.CreateBatchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(input, request, requestOptions));
    }

    private async __create(
        input: File | fs.ReadStream | Blob,
        request: Sync.CreateBatchRequest,
        requestOptions?: Batch.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.CreateBatchResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("input", input);
        if (request.webhook_url != null) {
            _request.append("webhook_url", request.webhook_url);
        }

        if (request.dry_run != null) {
            _request.append("dry_run", request.dry_run.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "/v2/batch",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.2",
                "User-Agent": "@sync.so/sdk/0.2.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.CreateBatchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sync.BadRequestError(_response.error.body as Sync.GenerationError, _response.rawResponse);
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 402:
                    throw new Sync.PaymentRequiredError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Sync.TooManyRequestsError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling POST /v2/batch.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve details about a specific batch, including its current status, processing metrics, and output file URL when available.
     *
     * @param {Sync.BatchId} id - The unique identifier of the batch
     * @param {Batch.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.NotFoundError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.batch.get("batch_abc123")
     */
    public get(id: Sync.BatchId, requestOptions?: Batch.RequestOptions): core.HttpResponsePromise<Sync.BatchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: Sync.BatchId,
        requestOptions?: Batch.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.BatchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                `/v2/batch/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.2",
                "User-Agent": "@sync.so/sdk/0.2.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.BatchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Sync.NotFoundError(_response.error.body as Sync.GenerationError, _response.rawResponse);
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling GET /v2/batch/{id}.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * List all batches for your organization with optional filtering by status and creation date. Results are ordered by creation date (newest first).
     *
     * @param {Sync.ListBatchesRequest} request
     * @param {Batch.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.batch.list()
     */
    public list(
        request: Sync.ListBatchesRequest = {},
        requestOptions?: Batch.RequestOptions,
    ): core.HttpResponsePromise<Sync.BatchResponse[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Sync.ListBatchesRequest = {},
        requestOptions?: Batch.RequestOptions,
    ): Promise<core.WithRawResponse<Sync.BatchResponse[]>> {
        const { status, created_after: createdAfter, created_before: createdBefore } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (status != null) {
            _queryParams["status"] = status;
        }

        if (createdAfter != null) {
            _queryParams["created_after"] = createdAfter;
        }

        if (createdBefore != null) {
            _queryParams["created_before"] = createdBefore;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "/v2/batch",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@sync.so/sdk",
                "X-Fern-SDK-Version": "0.2.2",
                "User-Agent": "@sync.so/sdk/0.2.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sync.BatchResponse[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Sync.InternalServerError(
                        _response.error.body as Sync.GenerationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling GET /v2/batch.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SYNC_API_KEY"];
        return { "x-api-key": apiKeyValue };
    }
}
