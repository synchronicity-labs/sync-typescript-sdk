/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Sync from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Generate {
    export interface Options {
        environment?: core.Supplier<environments.SyncEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Generate {
    constructor(protected readonly _options: Generate.Options) {}

    /**
     * @param {Sync.CreateGenerationDto} request
     * @param {Generate.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.BadRequestError}
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generate.generateControllerCreateGeneration({
     *         model: "lipsync-2",
     *         input: [{
     *                 type: "video",
     *                 url: "https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortvid-03a10044-7741-4cfc-816a-5bccd392d1ee.mp4"
     *             }, {
     *                 type: "audio",
     *                 url: "https://synchlabs-public.s3.us-west-2.amazonaws.com/david_demo_shortaud-27623a4f-edab-4c6a-8383-871b18961a4a.wav"
     *             }]
     *     })
     */
    public async generateControllerCreateGeneration(
        request: Sync.CreateGenerationDto,
        requestOptions?: Generate.RequestOptions,
    ): Promise<Sync.Generation> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "v2/generate",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "syncsdk",
                "X-Fern-SDK-Version": "0.0.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Sync.Generation;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sync.BadRequestError(_response.error.body as Sync.GenerationError);
                case 401:
                    throw new Sync.UnauthorizedError(_response.error.body as Sync.GenerationError);
                case 500:
                    throw new Sync.InternalServerError(_response.error.body as Sync.GenerationError);
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling POST /v2/generate.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id - Job ID
     * @param {Generate.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.NotFoundError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generate.generateControllerGetGeneration("id")
     */
    public async generateControllerGetGeneration(
        id: string,
        requestOptions?: Generate.RequestOptions,
    ): Promise<Sync.Generation> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                `v2/generate/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "syncsdk",
                "X-Fern-SDK-Version": "0.0.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Sync.Generation;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(_response.error.body as Sync.GenerationError);
                case 404:
                    throw new Sync.NotFoundError(_response.error.body as Sync.GenerationError);
                case 500:
                    throw new Sync.InternalServerError(_response.error.body as Sync.GenerationError);
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling GET /v2/generate/{id}.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {string} id - Job ID to cancel
     * @param {Generate.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.BadRequestError}
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.NotFoundError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generate.generateControllerCancelGeneration("id")
     */
    public async generateControllerCancelGeneration(
        id: string,
        requestOptions?: Generate.RequestOptions,
    ): Promise<Sync.Generation> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                `v2/generate/${encodeURIComponent(id)}/cancel`,
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "syncsdk",
                "X-Fern-SDK-Version": "0.0.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Sync.Generation;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sync.BadRequestError(_response.error.body as Sync.GenerationError);
                case 401:
                    throw new Sync.UnauthorizedError(_response.error.body as Sync.GenerationError);
                case 404:
                    throw new Sync.NotFoundError(_response.error.body as Sync.GenerationError);
                case 500:
                    throw new Sync.InternalServerError(_response.error.body as Sync.GenerationError);
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling POST /v2/generate/{id}/cancel.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {Sync.GenerateControllerGetGenerationsRequest} request
     * @param {Generate.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sync.UnauthorizedError}
     * @throws {@link Sync.InternalServerError}
     *
     * @example
     *     await client.generate.generateControllerGetGenerations()
     */
    public async generateControllerGetGenerations(
        request: Sync.GenerateControllerGetGenerationsRequest = {},
        requestOptions?: Generate.RequestOptions,
    ): Promise<Sync.Generation[]> {
        const { status } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (status != null) {
            _queryParams["status"] = status;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SyncEnvironment.Default,
                "v2/generations",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "syncsdk",
                "X-Fern-SDK-Version": "0.0.3",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Sync.Generation[];
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sync.UnauthorizedError(_response.error.body as Sync.GenerationError);
                case 500:
                    throw new Sync.InternalServerError(_response.error.body as Sync.GenerationError);
                default:
                    throw new errors.SyncError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SyncError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SyncTimeoutError("Timeout exceeded when calling GET /v2/generations.");
            case "unknown":
                throw new errors.SyncError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
